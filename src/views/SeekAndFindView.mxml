<?xml version="1.0"?>
<views:GameView xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
                width="100%" height="100%" xmlns:views="views.*"
                creationComplete="onCreationComplete(event)">
    <s:VGroup horizontalAlign="center"
              width="100%" height="100%">
        <s:Group id="room"
                 width="600" height="460">
            <s:Image id="backgroundImage"
                     width="100%" height="100%"/>
            <s:Group id="hiddenObjectsContainer"
                     width="100%" height="100%"
                     click="onClick(event)"/>
        </s:Group>
        <s:HGroup width="100%" height="100"
                  paddingLeft="10" paddingRight="10">
            <s:BorderContainer cornerRadius="10"
                               borderStyle="solid" borderWeight="1"
                               width="100%" height="100%">
                <s:HGroup verticalAlign="top"
                          paddingRight="10" paddingLeft="10"
                          paddingBottom="10" paddingTop="10"
                          gap="20"
                          width="100%" height="100%">
                    <s:Label text="Объекты поиска: "/>
                    <mx:List id="hiddenObjectsList"
                             selectable="false"
                             dataProvider="{hiddenObjects}"
                             labelField="name"
                             borderAlpha="0"
                             width="100%" height="100%"/>
                </s:HGroup>
            </s:BorderContainer>
            <s:Button label="РЕСТАРТ"
                      width="150" height="100%"
                      click="{controller.play()}"/>
        </s:HGroup>
    </s:VGroup>
    <fx:Script><![CDATA[
        import helpers.resources.ResourceManager;
        import helpers.utils.toArray;
        import models.HiddenObject;
        import models.Level;
        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.events.FlexEvent;

        import spark.skins.spark.ImageSkin;

        private var created:Boolean;
        private var imagesPool:Vector.<Image> = new <Image>[];
        private var occupiedIndexes:uint;

        [Bindable]
        private var hiddenObjects:ArrayCollection = new ArrayCollection();

        private var hiddenObjectByImage:Dictionary = new Dictionary();

        private function onCreationComplete(event:FlexEvent):void {
            created = true;

            update();
        }

        private function getImageInstance():Image {
            var hiddenObjectImage:Image;

            if (imagesPool.length > occupiedIndexes) {
                hiddenObjectImage = imagesPool[occupiedIndexes];
            } else {
                hiddenObjectImage = new Image();
                imagesPool[occupiedIndexes] = hiddenObjectImage;
            }

            occupiedIndexes++;

            return hiddenObjectImage;
        }

        override public function update():void {
            if (created) {
                var level:Level = controller.getCurrentLevel();

                if (hiddenObjectsContainer.numElements) {
                    hiddenObjectsContainer.removeAllElements();
                }

                occupiedIndexes = 0;

                backgroundImage.source = ResourceManager.instance.getBitmapDataById(level.name);

                for each (var hiddenObject:HiddenObject in level.hiddenObjects) {
                    var image:Image = getImageInstance();
                    image.source = ResourceManager.instance.getBitmapDataById(hiddenObject.name);
                    var positions:Vector.<Point> = hiddenObject.positions;
                    var pos:Point = positions[Math.floor(Math.random() * (positions.length - 1))]
                    if (pos.x > room.width) {
                        Alert.show('position.x > width of container:' + pos.x);
                        pos.x = room.width - image.width;
                    }
                    if (pos.y > room.height) {
                        Alert.show('position.y > height of container:' + pos.y);
                        pos.y = room.height - image.height;
                    }
                    image.x = pos.x;
                    image.y = pos.y;

                    hiddenObjectsContainer.addElement(image);
                    hiddenObjectByImage[image] = hiddenObject;
                }

                hiddenObjects.source = toArray(level.hiddenObjects);
            }
        }


        private function onClick(event:MouseEvent):void {

            var imageSkin:ImageSkin = event.target as ImageSkin;
            var right:Boolean;
            if (imageSkin) {
                right = true;
                var image:Image = imageSkin.hostComponent;
                var hiddenObject:HiddenObject = hiddenObjectByImage[image];
                if (hiddenObjectsContainer.containsElement(image)) {
                    hiddenObjectsContainer.removeElement(image);
                }
                var itemIndex:int = hiddenObjects.getItemIndex(hiddenObject);
                if (itemIndex != -1) {
                    hiddenObjects.removeItemAt(itemIndex);
                }
            }

            controller.incrementCounter(right);
        }

        override public function dispose():void {

        }
        ]]></fx:Script>
</views:GameView>
